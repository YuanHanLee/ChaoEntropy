p2 <- newprob$prob2
nese <- NewBootFun(p1, p2, n1, n2, B, FunName)
return(nese)
}
###############
################  C++
S_ACE <- function(data, k){
n <- sum(data)
f <- function(i, data){length(data[which(data == i)])}
x <- data[which(data != 0)]
D_rare <- length(x[which(x <= k)])
n_rare <- sum(x[which(x <= k)])
if (n_rare != 0){
C_rare <- 1 - f(1, x)/n_rare
} else {
C_rare = 1
}
n_abun <- n - n_rare
D_abun <- length(x[which(x > k)])
j <- c(1:k)
a1 <- sum(sapply(j, function(j)j*(j - 1)*f(j, x)))
a2 <- sum(sapply(j, function(j)j*f(j, x)))
if (C_rare != 0){
gamma_rare_hat_square <- max(D_rare/C_rare*a1/a2/(a2 - 1) - 1, 0)
}else{
gamma_rare_hat_square <- 0
}
S_ace <- D_abun + D_rare/C_rare + f(1, x)/C_rare*gamma_rare_hat_square
return(S_ace)
}
CppBootsFun <- function(x1, x2, B, FunName) {
est <- Chao1_sharedEstFun(x1, x2)
est <- ceiling(est)
X <- cbind(x1, x2)
i <- 1:B
sd(sapply(i, function(i) {
D1 <- sum(x1 > 0)
D2 <- sum(x2 > 0)
D12 <- sum(x1 > 0 & x2 > 0)
obsS <- D1 + D2 - D12
S1 <- S_ACE(x1, k=10)
S2 <- S_ACE(x2, k=10)
disS <- S1 + S2 - est
disS <- ceiling(disS)
cut <- (x1 > 0 | x2 > 0)
X <- X[cut, ]
if (obsS < disS) {
zero <- matrix(rep(0, 2 * (disS - obsS)), ncol=2)
X <- rbind(X, zero)
pos <- sample(1:disS, replace=T)
} else {
pos <- sample(1:obsS, replace=T)
}
newX <- X[pos, ]
y1 <- newX[, 1]
y2 <- newX[, 2]
FunName(y1, y2)
}))
}
################
################ paper 2000
BootsSpeciesFun <- function(x1, x2, B, FunName) {
D12_rare <- sum(0 < x1  & x1 <= 10 & 0 < x2  & x2<= 10)
D12 <- sum(x1 > 0 & x2 > 0)
S12 <- ceiling(FunName(x1, x2))
D12_abun <- D12 - D12_rare
X <- cbind(x1, x2)
pos <- (x1 > 0 & x2 > 0)
if (S12 <= D12_abun) {
Y <- X[pos, ]
} else {
zero <- matrix(rep(0, 2 * (S12 - D12_abun)), ncol=2)
Y <- rbind(X[pos, ], zero)
}
i <- 1:B
sd(sapply(i, function(i) {
set.seed(i)
re <- sample(1:dim(Y)[1], replace=T)
W <- Y[re, ]
w1 <- W[, 1]
w2 <- W[, 2]
FunName(w1, w2)
}))
}
################
p1 <- x1 / sum(x1)
p2 <- x2 / sum(x2)
sum(x1)
sum(x2)
D1 <- sum(x1 > 0)
D1
D2 <- sum(x2 > 0)
D1
D2
N1 <- c(D1 / 2, D1, D1 * 2)
N1
N2 <- ceiling(c(D2 / 2, D2, D2 * 2))
D1 <- sum(x1 > 0)
D2 <- sum(x2 > 0)
N1 <- ceiling(c(D1 / 2, D1, D1 * 2))
N2 <- ceiling(c(D2 / 2, D2, D2 * 2))
output <- list()
for (j in 1:length(N1)) {
n1 <- N1[j]
n2 <- N2[j]
R <- 500
set.seed(123)
X1 <- rmultinom(R, size=n1, prob=p1)
X2 <- rmultinom(R, size=n2, prob=p2)
X <- rbind(X1, X2)
tmp <- apply(X, MARGIN=2, function(x) {
x1 <- x[1 : length(p1)]
x2 <- x[(length(p1)+1) : (2 * length(p1))]
matrix <- ChaoShared.Ind(x1, x2, B=50)[1:2, 1:2]
homoMa <- BootstrapFunMa(x1, x2, 50, HomoEstFun)
heteMa <- BootstrapFunMa(x1, x2, 50, HeteroEstFun)
#     homo <- CppBootsFun(x1, x2, 50, HomoEstFun)
#     hete <- CppBootsFun(x1, x2, 50, HeteroEstFun)
#     homo2 <- BootsSpeciesFun(x1, x2, 50, HomoEstFun)
#     hete2 <- BootsSpeciesFun(x1, x2, 50, HeteroEstFun)
return(c(matrix[, 1], matrix[, 2], homoMa, heteMa))
#     return(c(matrix[, 1], matrix[, 2], homoMa, heteMa, homo, hete, homo2, hete2))
})
nu <- 2
se <- apply(tmp[1:nu, ], MARGIN=1, sd)
avgsd <- apply(tmp[(nu + 1):(dim(tmp)[1]), ], MARGIN=1, mean)
out <- matrix(c(se, avgsd), ncol=2, byrow=T)
colnames(out) <- c("Homogeneous", "Heterogeneous")
rownames(out) <- c("Sample s.e", "Avg est s.e. by chen", "Avg est s.e. by Ma")
output[[j]] <- out
}
for (j in 1:length(N1)) {
write.csv(output[[j]], paste(N1[j], N2[j], "data2a_1 vs data2a_2.csv"))
}
View(tmp)
j <- 1
n1 <- N1[j]
n1
n2 <- N2[j]
R <- 200
set.seed(123)
X1 <- rmultinom(R, size=n1, prob=p1)
X2 <- rmultinom(R, size=n2, prob=p2)
X <- rbind(X1, X2)
tmp <- apply(X, MARGIN=2, function(x) {
x1 <- x[1 : length(p1)]
x2 <- x[(length(p1)+1) : (2 * length(p1))]
matrix <- ChaoShared.Ind(x1, x2, B=50)[1:2, 1:2]
homoMa <- BootstrapFunMa(x1, x2, 50, HomoEstFun)
heteMa <- BootstrapFunMa(x1, x2, 50, HeteroEstFun)
#     homo <- CppBootsFun(x1, x2, 50, HomoEstFun)
#     hete <- CppBootsFun(x1, x2, 50, HeteroEstFun)
#     homo2 <- BootsSpeciesFun(x1, x2, 50, HomoEstFun)
#     hete2 <- BootsSpeciesFun(x1, x2, 50, HeteroEstFun)
return(c(matrix[, 1], matrix[, 2], homoMa, heteMa))
#     return(c(matrix[, 1], matrix[, 2], homoMa, heteMa, homo, hete, homo2, hete2))
})
nu <- 2
se <- apply(tmp[1:nu, ], MARGIN=1, sd)
avgsd <- apply(tmp[(nu + 1):(dim(tmp)[1]), ], MARGIN=1, mean)
out <- matrix(c(se, avgsd), ncol=2, byrow=T)
out
j <- 1
n1 <- N1[j]
n2 <- N2[j]
R <- 500
set.seed(123)
X1 <- rmultinom(R, size=n1, prob=p1)
X2 <- rmultinom(R, size=n2, prob=p2)
X <- rbind(X1, X2)
tmp <- apply(X, MARGIN=2, function(x) {
x1 <- x[1 : length(p1)]
x2 <- x[(length(p1)+1) : (2 * length(p1))]
matrix <- ChaoShared.Ind(x1, x2, B=50)[1:2, 1:2]
homoMa <- BootstrapFunMa(x1, x2, 50, HomoEstFun)
heteMa <- BootstrapFunMa(x1, x2, 50, HeteroEstFun)
#     homo <- CppBootsFun(x1, x2, 50, HomoEstFun)
#     hete <- CppBootsFun(x1, x2, 50, HeteroEstFun)
#     homo2 <- BootsSpeciesFun(x1, x2, 50, HomoEstFun)
#     hete2 <- BootsSpeciesFun(x1, x2, 50, HeteroEstFun)
return(c(matrix[, 1], matrix[, 2], homoMa, heteMa))
#     return(c(matrix[, 1], matrix[, 2], homoMa, heteMa, homo, hete, homo2, hete2))
})
nu <- 2
se <- apply(tmp[1:nu, ], MARGIN=1, sd)
avgsd <- apply(tmp[(nu + 1):(dim(tmp)[1]), ], MARGIN=1, mean)
out <- matrix(c(se, avgsd), ncol=2, byrow=T)
out
i <- 1:R
sapply(i, function(i) {
HomoEstFun(X1[, i], X2[, i])
})
sd(sapply(i, function(i) {
HomoEstFun(X1[, i], X2[, i])
}))
X1
View(`X1`)
sapply(i, function(i) {
HomoEstFun(X1[, i], X2[, i])
})
X2[, 1]
j <- 2
j <- 3
n1 <- N1[j]
n2 <- N2[j]
R <- 500
set.seed(123)
X1 <- rmultinom(R, size=n1, prob=p1)
X2 <- rmultinom(R, size=n2, prob=p2)
X <- rbind(X1, X2)
i <- 1:R
sd(sapply(i, function(i) {
HomoEstFun(X1[, i], X2[, i])
}))
n1
n2
i <- 1:R
sd(sapply(i, function(i) {
HomoEstFun(X1[, i], X2[, i])
}))
HomoEstFun(x1, x2)
D1 <- sum(x1 > 0)
D2 <- sum(x2 > 0)
D12 <- sum(x1 > 0 & x2 > 0)
x1_share <- x1[which(x1 > 0 & x2 > 0)]
x2_share <- x2[which(x1 > 0 & x2 > 0)]
f11 <- sum(x1_share == 1 & x2_share == 1)
D12_rare <- sum(x1_share <= 10 & x2_share <= 10)
D12_rare
pos_r <- (x1_share <= 10 & x2_share <= 10)
pos1_r <- (x1_share == 1 & x2_share <= 10)
pos2_r <- (x2_share == 1 & x1_share <= 10)
tmp <- sum(x1_share[pos_r] * x2_share[pos_r])
if (tmp == 0)  # correct when number of Xi*Yi <= 10 equal to 0 by Y.H. Lee
tmp <- 1
C12_rare <- 1 - (sum(x2_share[pos1_r]) + sum(x1_share[pos2_r]) - f11) / tmp
if (C12_rare == 0 || C12_rare > 1)  # Correct when C12 = 0 or C12 > 1 !!! by c++
C12_rare <- 1
est <- D12 - D12_rare + D12_rare / C12_rare
D12 - D12_rare
C12_rare
tmp <- sum(x1_share[pos_r] * x2_share[pos_r])
tmp
pos_r <- (x1_share <= 10 & x2_share <= 10)
sum(pos_r)
pos_r <- (x1_share <= 10 & x2_share <= 10)
pos1_r <- (x1_share == 1 & x2_share <= 10)
pos2_r <- (x2_share == 1 & x1_share <= 10)
tmp <- sum(x1_share[pos_r] * x2_share[pos_r])
tmp
x1_share[pos_r]
x2_share[pos_r]
i <- 1:R
sd(sapply(i, function(i) {
HomoEstFun(X1[, i], X2[, i])
}))
j <- 1
n1 <- N1[j]
n2 <- N2[j]
R <- 500
set.seed(123)
X1 <- rmultinom(R, size=n1, prob=p1)
X2 <- rmultinom(R, size=n2, prob=p2)
X <- rbind(X1, X2)
i <- 1:R
sd(sapply(i, function(i) {
HomoEstFun(X1[, i], X2[, i])
}))
output <- list()
for (j in 1:length(N1)) {
n1 <- N1[j]
n2 <- N2[j]
R <- 150
set.seed(123)
X1 <- rmultinom(R, size=n1, prob=p1)
X2 <- rmultinom(R, size=n2, prob=p2)
X <- rbind(X1, X2)
tmp <- apply(X, MARGIN=2, function(x) {
x1 <- x[1 : length(p1)]
x2 <- x[(length(p1)+1) : (2 * length(p1))]
matrix <- ChaoShared.Ind(x1, x2, B=25)[1:2, 1:2]
homoMa <- BootstrapFunMa(x1, x2, 25, HomoEstFun)
heteMa <- BootstrapFunMa(x1, x2, 25, HeteroEstFun)
#     homo <- CppBootsFun(x1, x2, 50, HomoEstFun)
#     hete <- CppBootsFun(x1, x2, 50, HeteroEstFun)
#     homo2 <- BootsSpeciesFun(x1, x2, 50, HomoEstFun)
#     hete2 <- BootsSpeciesFun(x1, x2, 50, HeteroEstFun)
return(c(matrix[, 1], matrix[, 2], homoMa, heteMa))
#     return(c(matrix[, 1], matrix[, 2], homoMa, heteMa, homo, hete, homo2, hete2))
})
nu <- 2
se <- apply(tmp[1:nu, ], MARGIN=1, sd)
avgsd <- apply(tmp[(nu + 1):(dim(tmp)[1]), ], MARGIN=1, mean)
out <- matrix(c(se, avgsd), ncol=2, byrow=T)
colnames(out) <- c("Homogeneous", "Heterogeneous")
rownames(out) <- c("Sample s.e", "Avg est s.e. by chen", "Avg est s.e. by Ma")
output[[j]] <- out
}
output
data5a <- read.table("~/Dropbox/Anne Chao/Data/SPADE Data/Two-Community Similarity/Data5a.txt")
x1 <- data2a[, 1]
x2 <- data2a[, 3]
x1 <- data5a[, 1]
x2 <- data5a[, 3]
JaccardIncidenceEst <- function(x1, x2) {
D1 <- sum(x1 > 0)
D2 <- sum(x2 > 0)
D12 <- sum(x1 > 0 & x2 > 0)
est <- D12 / (D1 + D2 - D12)
return(est)
}
JaccardIncidenceFun <- function(x1, x2, B) {
est <- JaccardIncidenceEst(x1, x2)
se <- BootstrapFunMa(x1, x2, B, FunName=JaccardIncidenceEst)
out <- matrix(c(est, se), ncol=2)
colnames(out) <- c("Estimator", "Bootstrap s.e.")
rownames(out) <- c("Jaccard incidence")
return(out)
}
JaccardIncidenceFun(x1, x2, 50)
source('~/Dropbox/Anne Chao/2014:0103-0109 Shared_v4 correct Bootstap/shared_v3 boots.R')
JaccardIncidenceFun(x1, x2, 50)
data5a <- read.table("~/Dropbox/Anne Chao/Data/SPADE Data/Two-Community Similarity/Data5a.txt")
x1 <- data5a[, 1]
x2 <- data5a[, 3]
JaccardIncidenceFun(x1, x2, 50)
source('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
est <- HomoEstFun(x1, x2)
est
D12 <- sum(x1 > 0 & x2 > 0)
D12
t <- est - D12
z <- qnorm((1-conf)/2, lower.tail=F)
K <- exp(z * sqrt(log(1 + se^2 / t^2)))
conf <- 0,95
conf <- 0.95
t <- est - D12
z <- qnorm((1-conf)/2, lower.tail=F)
K <- exp(z * sqrt(log(1 + se^2 / t^2)))
se <- BootstrapFunMa(x1, x2, B=200, HomoEstFun)
K <- exp(z * sqrt(log(1 + se^2 / t^2)))
K
CI <- c(D12 + t / K, D12 + t * K)
CI
t <- 0.0000000000001
z <- qnorm((1-conf)/2, lower.tail=F)
K <- exp(z * sqrt(log(1 + se^2 / t^2)))
CI <- c(D12 + t / K, D12 + t * K)
CI
K
se
e10
10e^2
10e
10e10
e10
1e10
1e+10
1e+10 == 10
2e+10 == 20
2e+10
as.numeric(2e+10)
a <- 2e+10 == 20
a <- 2e+10
2E+10 == 20
2E == 20
2E+1 == 20
2E+10 == 2 * 10^10
1e-10 == 10^-10
10^-10
t <- 1e-10
K <- exp(z * sqrt(log(1 + se^2 / t^2)))
CI <- c(D12 + t / K, D12 + t * K)
CI
K
t <- 1e-20
z <- qnorm((1-conf)/2, lower.tail=F)
K <- exp(z * sqrt(log(1 + se^2 / t^2)))
CI <- c(D12 + t / K, D12 + t * K)
CI
source('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
ChaoShared(data2a, nboot=200)
source('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
ChaoShared(data2a, nboot=200)
debugSource('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
debugSource('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
debugSource('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
debugSource('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
source('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
ChaoShared(data2a, nboot=200)
debugSource('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
debugSource('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
debugSource('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
debugSource('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
debugSource('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
debugSource('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
debugSource('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
debugSource('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
source('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
debugSource('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
debugSource('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
source('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
source('~/.active-rstudio-document')
source('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
source('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
source('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
source('~/Dropbox/Anne Chao/2014:0117-0123 Shared Species pkg/Shared_v5.R')
ChaoShared(data2a, nboot=200)
source('~/Dropbox/Anne Chao/2014:0117-0123 Shared Species pkg/Shared_v5.R')
ChaoShared(data2a, nboot=200)
source('~/Dropbox/Anne Chao/2014:0117-0123 Shared Species pkg/Shared_v5.R')
source('~/Dropbox/Anne Chao/2014:0117-0123 Shared Species pkg/Shared_v5.R')
ChaoShared(data2a, nboot=200)
source('~/Dropbox/Anne Chao/2014:0117-0123 Shared Species pkg/Shared_v5.R')
?package.skeleton("ChaoEntropy")
package.skeleton("ChaoShared")
ChaoShared(data2a, nboot=200)
ChaoShared(data2a, nboot=200, se=F)
ChaoShared(data2a, nboot=1)
ChaoShared <- function(data, datatype = c("abundance", "incidence"),
se = TRUE, nboot = 200, conf = 0.95) {
method <- "all"
if (se == TRUE) {
if (nboot < 1)
nboot <- 1
if (nboot == 1)
cat("Warning: When \"nboot\" =" ,nboot, ", the bootstrap s.e. and confidence interval can't be calculated.",
"\n\n")
}
if (is.numeric(conf) == FALSE || conf > 1 || conf < 0) {
cat("Warning: \"conf\"(confidence level) must be a numerical value between 0 and 1, e.g. 0.95.",
"\n")
cat("          We use \"conf\" = 0.95 to calculate!",
"\n\n")
conf <- 0.95
}
datatype <- match.arg(datatype)
if (datatype == "abundance") {
x1 <- data[, 1]
x2 <- data[, 2]
Basic <- BasicFun(x1, x2, nboot)
#     cat("(2)  ESTIMATION RESULTS OF THE NUMBER OF SHARED SPECIES: ", "\n")
output <- ChaoShared.Ind(x1, x2, method, nboot, conf, se)
}
if (datatype == "incidence") {
y1 <- data[, 1]
y2 <- data[, 2]
Basic <- BasicFun.Sam(y1, y2, B=nboot)
#     cat("(2)  ESTIMATION RESULTS OF THE NUMBER OF SHARED SPECIES: ", "\n")
output <- ChaoShared.Sam(y1, y2, method, conf, se)
}
out <- list(BASIC_DATA_INFORMATION=Basic,
ESTIMATION_RESULTS_OF_THE_NUMBER_OF_SHARED_SPECIES=output)
return(out)
}
a <- matrix(data2a)
a <- as.matrix(data2a)
a <- as.matrix(data2a)
View(a)
View(data2b)
View(data2a)
ChaoShared(a, nboot=1)
ChaoShared(a, nboot=1)$E
ChaoShared(data2a, nboot=1)$E
source('~/Dropbox/Anne Chao/2014:0117-0123 Shared Species pkg/Shared_v5.R')
setwd("~/Dropbox/Anne Chao/2014:0117-0123 Shared Species pkg")
package.skeleton("ChaoShared")
View(data2a)
View(data2a)
data2a
source('~/Dropbox/Anne Chao/2014:0117-0123 Shared Species pkg/Shared_v5.R')
source('~/Dropbox/Anne Chao/2014:0117-0123 Shared Species pkg/Shared_v5.R')
data2a
data2b
a <- data2b[-1, ]
sum(a[, 1])
sum(a[, 2])
sum(a[, 1] > 0 & a[, 2])
sum(a[, 1] > 0)
sum(a[, 2] > 0)
data2b
load("/Users/mikelee/iNEXT pkg/data/ant.rda")
ant
load("/Users/mikelee/Documents/GitHub/ChaoEntropy/data/Ant_count.rda")
View(Ant_data.count)
load("/Users/mikelee/Documents/GitHub/ChaoEntropy/data/Spider.rda")
load("/Users/mikelee/Documents/GitHub/ChaoEntropy/data/Ant_count.rda")
load("/Users/mikelee/Documents/GitHub/ChaoEntropy/data/Ant.rda")
load("/Users/mikelee/Documents/GitHub/ChaoEntropy/data/Insects.rda")
load("/Users/mikelee/Documents/GitHub/ChaoEntropy/data/Seed.rda")
load("/Users/mikelee/Documents/GitHub/ChaoEntropy/data/Spider.rda")
setwd("~/Documents/GitHub/ChaoEntropy/data")
View(Ant_data.count)
Ant_count <- Ant_data.count
Insects <- Insects_data
Seed <- Seed_data
Ant <- Ant_data
Spider <- Spider_data
save(Spider, "Spider.rda")
save(Spider, file="Spider.rda")
save(Insects, file="Insects.rda")
save(Seed, file="Seed.rda")
save(Ant, file="Ant.rda")
save(Ant_count, file="Ant_count.rda")
remove.packages("ChaoEntropy")
require('devtools')
install_github('ChaoEntropy','YuanHanLee')
install_github('ChaoEntropy','YuanHanLee')
install_github('ChaoEntropy','YuanHanLee')
require(ChaoEntropy)
require('devtools')
install_github('ChaoEntropy','YuanHanLee')
